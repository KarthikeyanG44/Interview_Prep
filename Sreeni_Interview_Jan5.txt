
# parentheses must appear in a balanced fashion. Balanced parentheses means that each opening symbol has a corresponding closing symbol and the pairs of parentheses are properly nested. Consider the following correctly balanced strings of parentheses:


# (((())))

# (()((())()))
# Compare those with the following, which are not balanced:

# ((((((())

# ()))

# (()()(()
# The ability to differentiate between parentheses that are correctly balanced and those that are unbalanced is an important part of recognizing many programming language structures.

# The challenge then is to write an algorithm that will read a string of parentheses from left to right and decide whether the symbols are balanced.
 
# (()()()())




# A bracket is considered to be any one of the following characters: (, ), {, }, [, or ].

# Two brackets are considered to be a matched pair if the an opening bracket (i.e., (, [, or {) occurs to the left of a closing bracket (i.e., ), ], or }) of the exact same type. There are three types of matched pairs of brackets: [], {}, and ().

# A matching pair of brackets is not balanced if the set of brackets it encloses are not matched. For example, {[(])} is not balanced because the contents in between { and } are not balanced. The pair of square brackets encloses a single, unbalanced opening bracket, (, and the pair of parentheses encloses a single, unbalanced closing square bracket, ].

# Some examples of balanced brackets are []{}(), [({})]{}() and ({(){}[]})[].

# By this logic, we say a sequence of brackets is considered to be balanced if the following conditions are met:

# It contains no unmatched brackets.
# The subset of brackets enclosed within the confines of a matched pair of brackets is also a matched pair of brackets.
# Given  strings of brackets, determine whether each sequence of brackets is balanced. If a string is balanced, print YES on a new line; otherwise, print NO on a new line.



def is_valid_paranethesis(expression):
    stack = []
    stack_idx = 0

    opening_brackets = "{(["
    closing_brackets = "})]"

    matching_bracket = {}
    for opening_bracket, closing_bracket in zip(opening_brackets, closing_brackets):
        matching_bracket[opening_bracket] = closing_bracket
        matching_bracket[closing_bracket] = opening_bracket

    for paran in expression:
            if paran in opening_brackets:
                stack.append(paran)
            elif paran in closing_brackets:
                if len(stack) > 0 and stack[-1] == matching_bracket[paran]:
                    stack.pop()
                else:
                    return False

    return len(stack) == 0

print(is_valid_paranethesis("(((())))")) # True
print(is_valid_paranethesis("(()((())()))")) # True
print(is_valid_paranethesis("((((((())")) # False
print(is_valid_paranethesis("()))")) # False
print(is_valid_paranethesis(")()")) # False
print(is_valid_paranethesis(")()(")) # False
print(is_valid_paranethesis(")()(")) # False

# New Cases
print(is_valid_paranethesis("[({})]{}()")) # True




https://github.com/sreenivasanac
https://github.com/sreenivasanac/vanitynumber
https://github.com/sreenivasanac/vanitynumber/blob/master/vanitynumber/wordify.py
https://github.com/sreenivasanac/vanitynumber/blob/master/vanitynumber/helper.py
https://github.com/sreenivasanac/vanitynumber/blob/master/vanitynumber/t9_graph_node.py
https://github.com/sreenivasanac/vanitynumber/blob/master/vanitynumber/tests/test_helper.py
https://github.com/sreenivasanac/vanitynumber/blob/master/vanitynumber/tests/test_wordify.py







